* SPARTAN EMACS

Finally, a simple base Emacs configuration framework

** FEATURES

    - KISS, clean configuration and a comprehensible layers system with minimal abstraction, (easy to hack on to make it "yours.")
    - Uses lightweight, mostly-vanilla configured layer packages
    - Straight + use-package version version pinning for greater stability
    - Popular langs come with optional layers that are preconfigured with the best modes, eglot LSP, and company mode
    - Project Awareness is available with Projectile, VC with Magit, Treemacs, etc.
    - Choose between holy or evil mode
    - Choose between ido or ivy
    - Load time with all layers enabled is around 2 seconds  without resorting to use-package deferrals, pdumper or hacks.
    - Tested on Linux, but should work also work fine anywhere for the most part.
    - Tuned for ultimate performance using the latest *gccemacs* with native *json* parsing with *eglot* language server protocol  (not required, just recommended.)

  Spartan Emacs is not a starter kit. It does not teach Emacs. If you are new, and please begin by checking out ~M-x help-with-tutorial~.
  ~M-x~ means (~Alt~ + ~x~) and then ~help-with-tutorial~ Return (enter) to begin. One might follow up with ~An Introduction to Programming in Emacs Lisp~
  additionally. The manuals may all be found at https://www.gnu.org/software/emacs/manual/

  [[spartan-theme.png]]
  [[spartanel_1_dark.png]]

** News

*** Sat 02 Sep 2023 04:03:11 PM MDT

3.0 Release, total re-write

- Uses straight + use-package for version pinning. (We're done with MELPA and package.el now.)

  With this, we now provide version pins, hopefully for better stability long-term, one user can be sure he has the same package versions as another user.

  We're not deferring packages, currently -- actually the opposite, packages are configured with :demand.
  In my experience, this provides a less buggy experience in general.

- Added company mode.

- Added ivy mode

- Packages auto-bootstrap. (Except more specialized language layers, those have to manually enabled.)

- Fixes all-around everywhere. Lots of code removed in various places.

- A new autogenerated ~/.emacs.d/spartan.el file exists to contain primary user configurations and make tracking upstream here via git easier to manage.

** QUICK INSTALL

   #+BEGIN_SRC bash
     git clone https://github.com/a-schaefers/spartan-emacs.git ~/.emacs.d
   #+END_SRC

*** LAYERS

    - Edit ~.emacs.d/spartan.el~ to configure the theme, fonts, and  additional language layers, then restart

**** HOW LAYERS WORK

    - init.el (among other things) auto-generates a default ~/.emacs.d/.spartan.el

      This configuration file is not stored in our Git, but you might want to add it in to yours.

      It may freely be modified by the user, but keep in mind it loads early, before the layers.

    - Enabled layer packages are loaded after ~/.emacs.d/spartan.el

    - Layer packages may be again customized in ~/.emacs.d/spartan.d/ with any additional setup or overrides

      (all lisp files in spartan.d/ auto load last, during the emacs-startup-hook)

*** MINIMAL LANGUAGE LAYERS PRECONFIGURED

The idea here is to provde everywhere the get up and going configuration, this means proper syntax support,
auto-completion and find definition, etc. via eglot's minimal language server protocol implementation.
Some of the language modes also include repls. Debugging is provided within many of the languages itself,
e.g. Python and Ruby have builtin debuggers. With C, one may use ~M-x gdb~, etc.

With compiled languages, one might use M-x cc and set the compile-command to something instead of make if needed, etc.

- Emacs Lisp (paredit, builtins)
- Common Lisp (slime)
- Clojure (lsp)
- C (lsp)
- Bash  (shellcheck)
- Javascript / Typescript (lsp)
- Python (lsp)
- Rust (lsp)
- Haskell (lsp)
- Go (lsp)
- Ruby (lsp)
- Terraform (lsp)
- Nix (mode)

*** HOW TO UPDATE

Normally, we should be able to just pull this repo, restart Emacs and execute M-x ~straight-thaw-versions~

    - *git pull*

      Note: ~if you're upgrading from <3.0 prior versions of spartan-emacs, I'd recommend cloning the project again.~

    - *M-x straight-thaw-versions*

    - *Restart Emacs*

*** BINDS

    - Default emacs binds (unless you enable evil.)

    - Short M-x aliases

      M-x git  (magit)
      M-x pro  (projectile)
      M-x sh   (better-shell)
      M-x lint (flymake)
      etc...

    - Also see [[https://github.com/a-schaefers/spartan-emacs/blob/master/spartan-layers/spartan-eglot.el][spartan-eglot.el]] for language-server-protocol binds under the M- prefix.

    - Language mode specifc binds should be handled by the mode upstream or by the individual user.

    - Overrides go in ~.emacs.d/spartan.d/~

***** /On Ergonomics and the dreaded "Emacs Pinky" -- A wholistic approach/

I am passionate about using good ergonomics to extend the life and health of our fingers and wrists as programmers.

A major contributing factor to RSI is programming is the use of modifiers, which Emacs makes heavy use of by default.

0. Start with a mechanical keyboard.

   For this, I also would recommend a board with cherry blue or gateron blue keys, or perhaps browns. So do a little research.

1. Evil mode

   Evil-mode users avoid much of the issue entirely, though please be careful about twisting your left wrist while pressing the escape key.
   You may not even notice you are doing this until it is too late.

2. Holy mode (standard Emacs binds)

   Karate chops.

   I recommend here the use of karate chop control presses via a 60% keyboard, this enables you to keep your wrist straight while using modifiers.

   *OR*

   Swap left Alt with left Control.

   If karate chopping your control keys is not for you, I recommend this keyswap instead.

   Swapping left alt with left control enables the user to hold the control modifier with the left thumb, and the right alt modifier (in its natural position) with the right thumb.
   The result of this simple keyswap is that it is now possible to use both modifiers without holding them with the pinky or tweaking the wrists.
   This keyswap is available in Gnome and accessible with the Gnome-Tweaks tool, and other Desktops have their own methods, too.

3. Try lifting weights

   It's amazing what a little bit of moderate exercise can do for the programmer's RSI. Try some curls and upright rows, military press and lateral pull-downs. 15 minutes a day might be all you need.

4. Diet and sleep

   This goes without saying and is out of scope, but do some research and try some things to improve in these areas -- it should help!
